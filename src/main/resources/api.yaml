openapi: 3.0.3
info:
  title: Bookstore Api
  description: Bookstore Api.
  version: 0.0.1
paths:
  # Add, remove, browse books
  /books:
    post:
      description: Add a book.
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        201:
          description: Book has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
    get:
      description: Get list of books.
      operationId: getBooks
      responses:
        200:
          description: List of all books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/{book_id}:
    get:
      description: Get a book.
      operationId: getBookById
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Book resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          description: Bad request.
    put:
      description: Edit a book.
      operationId: editBookById
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        200:
          description: Book updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
    delete:
      description: Remove a book.
      operationId: deleteBookById
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        204:
          description: Book deleted.
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
  # Add to, remove from, browse cart
  /carts/{user_id}/items:
    get:
      description: Get list of items from cart.
      operationId: getCartContentById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Users cart contents.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        401:
          description: User not logged in.
        403:
          description: User not authorized.
    delete:
      description: Clear the cart.
      operationId: clearCartContentById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        204:
          description: Cart cleared.
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
  /carts/{user_id}/items/{item_id}:
    put:
      description: Add an items to cart.
      operationId: addItemToCartById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: item_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        204:
          description: Item added to cart.
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
    delete:
      description: Remove item from cart.
      operationId: removeItemFromCartById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: item_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        204:
          description: Item removed from cart.
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
  # Order, order states
  /orders/{user_id}:
    post:
      description: Create an order from users cart.
      operationId: createOrderFromCartById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Order placed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
  /orders/{order_id}/paid:
    put:
      description: Change payment status for order.
      operationId: setPaymentStatusForOrderById
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - AWAITING PAYMENT
                - PAID
      responses:
        204:
          description: Order paid.
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
  /orders/{order_id}/sent:
    put:
      description: Change sent status for order.
      operationId: setSentStatusForOrderById
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - IN PROGRESS
                - SENT
      responses:
        204:
          description: Order sent.
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
  /orders/{order_id}/completed:
    put:
      description: Change completion status for order.
      operationId: setCompletionStatusForOrderById
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - IN PROGRESS
                - COMPLETED
      responses:
        204:
          description: Order completed.
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
  # User related endpoints
  /users:
    post:
      description: Create a user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: User created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request.
        409:
          description: Submitted data violate SQL constraints.
  /users/{user_id}:
    get:
      description: Get a user.
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: User data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
    put:
      description: Edit a user.
      operationId: editUserById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: User succesfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
    delete:
      description: Remove a user.
      operationId: deleteUserById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        204:
          description: User succesfully deleted.
        400:
          description: Bad request.
        401:
          description: User not logged in.
        403:
          description: User not authorized.
  /users/login:
    post:
      description: Log in as user.
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: user
                password:
                  type: string
                  example: password
      responses:
        200:
          description: User succesfully logged in.
        400:
          description: Bad request.
        403:
          description: Invalid credentials.
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        title:
          type: string
          example: "Guts 'N Gunships"
        author:
          type: string
          example: "Mark Garrison"
        publisher:
          type: string
          example: "Mark Garrison"
    Cart:
      type: array
      items:
        $ref: "#/components/schemas/Book"
    Order:
      type: object
      required:
        - items
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        user_id:
          type: integer
          example: 1
          readOnly: true
        is_paid:
          type: boolean
          example: false
          readOnly: true
        is_sent:
          type: boolean
          example: false
          readOnly: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/Book"
    User:
      type: object
      required:
        - username
        - password
        - email
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        username:
          type: string
          example: user
        password:
          type: string
          example: password
        email:
          type: string
          example: user@site.com
        cart:
          $ref: "#/components/schemas/Cart"
  parameters:
    param_offset:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    param_limit:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
